#
# Non-crash tests for the changed page bitmaps that require debug builds
#
--source include/have_debug.inc
--source include/have_innodb.inc
--source include/count_sessions.inc

--disable_warnings
DROP TABLE IF EXISTS t1;
--enable_warnings

let $MYSQLD_DATADIR= `select @@datadir`;

call mtr.add_suppression("log tracking bitmap write failed, stopping log tracking thread!");
call mtr.add_suppression("last tracked LSN in");

--echo 1st restart
--source include/restart_mysqld.inc
RESET CHANGED_PAGE_BITMAPS;
CREATE TABLE t1 (x INT) ENGINE=InnoDB;

#
# Test for bug 1111226: test that bitmap write errors are handled gracefully
#

# Setup an error on bitmap write
--echo 2nd restart
--exec echo "wait" > $MYSQLTEST_VARDIR/tmp/mysqld.1.expect
--shutdown_server 10
--source include/wait_until_disconnected.inc
--enable_reconnect
--exec echo "restart:-#d,bitmap_page_write_error" > $MYSQLTEST_VARDIR/tmp/mysqld.1.expect
--source include/wait_until_connected_again.inc

# Generate log data that is larger than the log capacity
INSERT INTO t1 VALUES (1),(2),(3),(4),(5);
INSERT INTO t1 VALUES (1),(2),(3),(4),(5);
INSERT INTO t1 VALUES (1),(2),(3),(4),(5);
INSERT INTO t1 SELECT x FROM t1;
INSERT INTO t1 SELECT x FROM t1;
INSERT INTO t1 SELECT x FROM t1;
INSERT INTO t1 SELECT x FROM t1;
INSERT INTO t1 SELECT x FROM t1;
INSERT INTO t1 SELECT x FROM t1;
INSERT INTO t1 SELECT x FROM t1;
INSERT INTO t1 SELECT x FROM t1;
INSERT INTO t1 SELECT x FROM t1;
INSERT INTO t1 SELECT x FROM t1;
INSERT INTO t1 SELECT x FROM t1;
INSERT INTO t1 SELECT x FROM t1;
INSERT INTO t1 SELECT x FROM t1;

# At this point the log tracker thread should have quit
# TODO: test its status through I_S query once the table is implemented

--echo 3rd restart
--source include/restart_mysqld.inc

DROP TABLE t1;

#
# Test for bug 1217002 (RENAME/DROP crashes with innodb_track_changed_pages)
#
CREATE TABLE t1 (x INT NOT NULL UNIQUE KEY) ENGINE=InnoDB;
INSERT INTO t1 VALUES(5);

# 1. Pause the log tracking thread
SET @@GLOBAL.innodb_track_changed_pages=FALSE;
SET @@GLOBAL.innodb_log_checkpoint_now=TRUE;

# 2. Rename a table to log a MLOG_FILE_RENAME operation
RENAME TABLE t1 TO t2;

# 3. Start an ALTER TABLE and stop it after the table -> temp table rename
--connect (con2,localhost,root,,)
--connection default

SET DEBUG_SYNC="commit_cache_rebuild_middle SIGNAL alter_table_ready WAIT_FOR finish_alter_table";

send ALTER TABLE t2 ADD PRIMARY KEY(x);

# 4. Force a checkpoint and resume the log tracker thread, so that it misapplies the t1 > t2 rename.
--connection con2

SET DEBUG_SYNC="now WAIT_FOR alter_table_ready";

SET @@GLOBAL.innodb_log_checkpoint_now=TRUE;
SET @@GLOBAL.innodb_track_changed_pages=TRUE;

# 5. Force the log tracker to catch up.
SET @@GLOBAL.innodb_track_redo_log_now=TRUE;

# 6. Finish the ALTER TABLE, which then crashes if the bug is present.
SET DEBUG_SYNC="now SIGNAL finish_alter_table";

--connection default
reap;
SET DEBUG_SYNC="RESET";

disconnect con2;

DROP TABLE t2;

--source include/wait_until_count_sessions.inc
