#
# Non-crash tests for the changed page bitmaps that require debug builds
#
--source include/have_debug.inc
--source include/have_innodb.inc

--disable_warnings
DROP TABLE IF EXISTS t1;
--enable_warnings

let $MYSQLD_DATADIR= `select @@datadir`;

call mtr.add_suppression("InnoDB: Error: log tracking bitmap write failed, stopping log tracking thread!");

--echo 1st restart
--source include/restart_mysqld.inc
RESET CHANGED_PAGE_BITMAPS;
CREATE TABLE t1 (x INT) ENGINE=InnoDB;

#
# Test for bug 1111226: test that bitmap write errors are handled gracefully
#

# Setup an error on bitmap write
--echo 2nd restart
--exec echo "wait" > $MYSQLTEST_VARDIR/tmp/mysqld.1.expect
--shutdown_server 10
--source include/wait_until_disconnected.inc
--enable_reconnect
--exec echo "restart:-#d,bitmap_page_write_error" > $MYSQLTEST_VARDIR/tmp/mysqld.1.expect
--source include/wait_until_connected_again.inc

# Generate log data that is larger than the log capacity
INSERT INTO t1 VALUES (1),(2),(3),(4),(5);
INSERT INTO t1 VALUES (1),(2),(3),(4),(5);
INSERT INTO t1 VALUES (1),(2),(3),(4),(5);
INSERT INTO t1 SELECT x FROM t1;
INSERT INTO t1 SELECT x FROM t1;
INSERT INTO t1 SELECT x FROM t1;
INSERT INTO t1 SELECT x FROM t1;
INSERT INTO t1 SELECT x FROM t1;
INSERT INTO t1 SELECT x FROM t1;
INSERT INTO t1 SELECT x FROM t1;
INSERT INTO t1 SELECT x FROM t1;
INSERT INTO t1 SELECT x FROM t1;
INSERT INTO t1 SELECT x FROM t1;
INSERT INTO t1 SELECT x FROM t1;
INSERT INTO t1 SELECT x FROM t1;
INSERT INTO t1 SELECT x FROM t1;

# At this point the log tracker thread should have quit
# TODO: test its status through I_S query once the table is implemented

--echo 3rd restart
--source include/restart_mysqld.inc

DROP TABLE t1;
